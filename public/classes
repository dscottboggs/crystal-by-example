<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Crystal by Example: Classes</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
            window.location.href = 'blocks-with-arguments';
          }
          
          
          if (e.key == "ArrowRight") {
            window.location.href = 'methods-ii';
          }
          
      }
  </script>
  <body>
    <div class="example" id="classes">
      <h2><a href="index.html">Crystal by Example</a>: Classes</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>All of the examples so far have been just lines of code dropped into a file,
like a shell script. While you can write Crystal like this, for anything more
than the smallest weekend project or the most basic educational excercises, you'll
want to split your code up into a more well-organized structure. Crystal offers
3 ways to namespace your code -- Classes, Structs and Modules. We'll go over Classes
and Modules now, but Structs can wait until later.</p>

          </td>
          <td class="code empty leading">
           
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>A class is a blueprint from which individual objects are created. As an example, consider a Person class. You declare a class like this:</p>

          </td>
          <td class="code leading">
           <div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">Person</span>
<span class="k">end</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>You create an instance of a class by calling the <code>new</code> method on that class. Here, person is an instance of Person.</p>

          </td>
          <td class="code leading">
           <div class="highlight"><pre><span></span><span class="n">person</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="n">new</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>We can't do much with person, so let's add some concepts to it. An object is a collection
of data which responds to some methods. Since we're using a <code>Person</code> as an example,
lets give the person a name and an age. We'll come back to methods and what those are in a
moment. Note that all types must start with a capital letter, and variables that are members
of an object begin with the <code>@</code> symbol.</p>

          </td>
          <td class="code leading">
           <div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">Person</span>
  <span class="vi">@name</span> <span class="o">=</span> <span class="s2">&quot;Alice&quot;</span>
  <span class="vi">@age</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">end</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>We still can't do much with this because this information is only available within the class. However, we can make it available publicly with the <code>getter</code>, <code>setter</code>, or <code>property</code> macros</p>

          </td>
          <td class="code leading">
           <div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">Person</span>
  <span class="bp">property</span> <span class="n">name</span>
  <span class="bp">getter</span> <span class="n">age</span>
<span class="k">end</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Now we can work with a <code>Person</code>'s data</p>

          </td>
          <td class="code leading">
           <div class="highlight"><pre><span></span><span class="n">person</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="n">new</span>
<span class="n">person</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;Bob&quot;</span>
<span class="nb">puts</span> <span class="n">person</span><span class="o">.</span><span class="n">age</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>There is also a shortcut for defining the type and/or default data on a <code>property</code>, <code>getter</code>, or <code>setter</code>.</p>

          </td>
          <td class="code leading">
           <div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">Automobile</span>
  <span class="bp">property</span> <span class="n">capacity</span> <span class="p">:</span> <span class="nb">UInt8</span>
  <span class="bp">getter</span> <span class="n">number_of_doors</span> <span class="o">=</span> <span class="mi">2_u8</span>
  <span class="bp">property</span> <span class="n">color</span> <span class="p">:</span> <span class="nb">String</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>A value not assigned by default <em>must</em> be assigned in an overload of the special <code>initialize</code> method</p>

          </td>
          <td class="code leading">
           <div class="highlight"><pre><span></span>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">capacity</span><span class="p">,</span> <span class="vi">@color</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Naming a method starting with the <code>@</code> symbol is the same as setting the instance variable with
the same name to that value</p>

          </td>
          <td class="code">
           <div class="highlight"><pre><span></span>    <span class="vi">@capacity</span> <span class="o">=</span> <span class="n">capacity</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <a href="https://carc.in/#/r/8dqy" target="blank">
        <img title="Run code" src="crystal_icon.svg" class="run" />
      </a>
      
      <p class="next">
        Next example: <a href="methods-ii">Methods II</a>.
      </p>
      
      <p class="footer">
        by the Crystal Community | based on <a href="https://gobyexample.com/">Go By Example</a> | <a href="https://github.com/dscottboggs/crystal-by-example/blob/master/examples/classes">source</a> | <a href="https://github.com/dscottboggs/crystal-by-example/blob/master/LICENSE">license</a>
      </p>
    </div>
    <script>
      var codeLines = [];
                codeLines.push('
');
          codeLines.push('class Person
end
');
          codeLines.push('person = Person.new
');
          codeLines.push('class Person
  @name = "Alice"
  @age = 0
end
');
          codeLines.push('class Person
  property name
  getter age
end
');
          codeLines.push('person = Person.new
person.name = "Bob"
puts person.age
');
          codeLines.push('class Automobile
  property capacity : UInt8
  getter number_of_doors = 2_u8
  property color : String
');
          codeLines.push('  def initialize(capacity, @color)
');
          codeLines.push('    @capacity = capacity
  end
end
');

    </script>
    <script src="site.js" async></script>
  </body>
</html>